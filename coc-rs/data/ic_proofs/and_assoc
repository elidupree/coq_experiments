A1. ((A, B) = (C, D)) = ((A = C) & (B = D))
A2. ((A, B) = (C, D)) = ((B, A) = (D, C))

let rotate1 = (ac => e => ac(a => c => (a, (c, e)))
let rotate2 = (a => ce => ce(c => e => ((a, c), e))
((A=B) & (C=D)) & (E=F)
= ((A,C) = (B,D)) & (E=F)
= ((A,C),E) = ((B,D),F)
= (((A,C),E) = ((B,D),F)) & (((A,C),E)rotate1 = ((B,D),F)rotate1)
= (((A,C),E) = ((B,D),F)) & ((A,(C,E)) = (B,(D,F)))  [by unfolding]
= ((A,(C,E)) = (B,(D,F))) & (((A,C),E) = ((B,D),F))  [by and_sym]
= ((A,(C,E)) = (B,(D,F))) & ((A,(C,E))rotate2 = (B,(D,F))rotate2)  [by folding]
= ((A,(C,E)) = (B,(D,F)))
= (A=B) & ((C,E) = (D,F))
= (A=B) & ((C=D) & (E=F))