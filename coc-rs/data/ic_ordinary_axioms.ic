"reflexivity" := A -> A
"union left" := (A + B) -> A
"union right" := (A + B) -> B
"union introduction" := (A -> B) -> (A -> (A + B))

"unfold const" := const A B -> A
"unfold fuse" := fuse A B C -> (A C)(B C)

"specialization" := all A -> (A B)
"transitivity" := ((A -> B) + (B -> C)) -> (A -> C)
"infinite union application" := (∀x, (A x -> (B x))) -> ((∀x, A x) -> (∀x, B x))