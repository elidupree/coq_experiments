An implementation of Girard's paradox, as stated in the paper "A Simplification of Girard's Paradox" (Antonius J.C. Hurkens), except that instead of being written in System U, it's written in "CoC plus ℙ:ℙ", which I believe is strictly more permissive.

> False : ℙ.
> False := ∀P:ℙ, P.

> not := ∀_:ℙ, ℙ.
> not := λP:ℙ, ∀_:P, False.

> power : ∀_:ℙ, ℙ.
> power := λS:ℙ, ∀_:S, ℙ.

> pp : ∀_:ℙ, ℙ.
> pp := λS:ℙ, (power (power S)).

> U : ℙ.
> U := ∀X:ℙ, ∀_:(∀_:(pp X), X), (pp X).

Hurkens says we will not consider tau and sigma as formulas, because they wanted to emphasize that the subformulas of `Paradox` are _normal_. I don't really care if the subformulas are normal (just that there is an instance of `False` at all), so I'm going to just write them as formulas.

> tau : ∀_:(pp U), U.
> tau := (
    λt:(pp U),
    λX:ℙ,
    λf:(∀_:(pp X), X),
    λp:(power X),
    (t (λx:U, (p (f (x X f)))))
  ).

> sigma : ∀_:U, (pp U).
> sigma := λs:U, (s U (λt:(pp U), (tau t))).

> Delta : (power U).
> Delta := λy:U, ∀_:(∀p:(power U), ∀_:(sigma y p), (p (tau (sigma y)))), False.

> Omega : U.
> Omega := (tau (λp:(power U), ∀x:U, ∀_:(sigma x p), (p x))).

> P2TypeL : ∀p:(power U), ℙ.
> P2TypeL := λp:(power U), ∀_:(∀x:U, ∀_:(sigma x p), (p x)), (p Omega).

> P2Type : ℙ.
> P2Type := ∀p:(power U), (P2TypeL p).

> P2 : P2Type.
> P2 := (
    λp:(power U),
    λ1:(∀x:U, ∀_:(sigma x p), (p x)),
    (1 Omega (λx:U, (1 (tau (sigma x)))))
  ).

> P11 : ∀_:P2Type, (Delta Omega).
> P11 : ∀_:P2Type, ∀_:(∀p:(power U), ∀_:(sigma Omega p), (p (tau (sigma Omega)))), False.
> P11 := (
    λ0:P2Type,
    (
      0
      Delta
      (
        λx:U,
        λ2:(sigma x Delta),
        λ3:(∀p:(power U), ∀_:(sigma x p), (p (tau (sigma x)))),
        (3 Delta 2 (λp:(power U), (3 (λy:U, (p (tau y))))))
      )
    )
  ).

> P12 : ∀_:P2Type, ∀p:(power U), (P2TypeL (λy:U, (p (tau (sigma y))))).
> P12 : ∀_:P2Type, ∀p:(power U), ∀_:(∀x:U, ∀_:(sigma x (λy:U, (p (tau (sigma y))))), (p (tau (sigma x)))), (p (tau (sigma Omega))).
?????
> P12 : ∀_:P2Type, ∀p:(power U), ∀_:((Omega U (λt:(pp U), (tau t))) p), (p (tau (sigma Omega))).
> P12 : ∀_:P2Type, ∀p:(power U), ∀_:(sigma Omega p), (p (tau (sigma Omega))).
> P12 := λ0:P2Type, λp:(power U), (0 (λy:U, (p (tau (sigma y))))).

> P1 : ∀_:P2Type, False.
> P1 := λ0:P2Type, (P11 0 (P12 0)).

> Paradox : False.
> Paradox := (P1 P2).