use crate::constructors::{Constructors, ConstructorEntry, DataArgumentDefinition, PreconditionDefinition, ArgsCompoundDefinition};
use lalrpop_util::ParseError;

grammar;

extern {
    type Error = String;
}

pub Constructors: Constructors = {
  <entries:Entry*> =>? {
    let mut constructors = Constructors::default();
    for entry in entries.into_iter().flatten() {
      constructors.add_entry(entry).map_err(|error| ParseError::User {error})?;
    }
    Ok(constructors)
  }
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Entry: Option<ConstructorEntry> = {
  r"/\*[^\*]*\*/" => None,

  "data" <name:TypeName> ";" => Some(ConstructorEntry::DataType{name}),

  "predicate" <name:TypeName> <type_parameters:TypeName+> "," "notated" <notation:Notation> ";"
    => Some(ConstructorEntry::PredicateType{<>}),

  <name:TypeName> "(" <data_arguments:Comma<DataArgumentDefinition>> <preconditions:Comma<PreconditionDefinition>> ")"
    "->" <constructed_type:TypeName> <resulting_type_parameters:ArgsCompoundDefinition*> <notation:("," "notated" <Notation>)?> ";"
    => Some(ConstructorEntry::Constructor{<>}),
}

DataArgumentDefinition: DataArgumentDefinition = <name:ArgumentName> ":" <datatype:TypeName> => DataArgumentDefinition {<>};
PreconditionDefinition: PreconditionDefinition = "_" ":" <predicate_type:TypeName> <type_parameters:ArgsCompoundDefinition+> => PreconditionDefinition {<>};
ArgsCompoundDefinition: ArgsCompoundDefinition = {
  <name:ArgumentName> => ArgsCompoundDefinition::Argument(name),
  <constructor:TypeName> => ArgsCompoundDefinition::Constructor{<>, arguments: Vec::new()},
  "("<constructor:TypeName> <arguments:ArgsCompoundDefinition*>")" => ArgsCompoundDefinition::Constructor{<>},
}

TypeName: String = r"[A-Z][a-zA-Z0-9]*" => <>.to_string();
ArgumentName: String = r"[a-z][a-zA-Z0-9_]*" => <>.to_string();
Notation: String = r#""[^"]*""# => <>.trim_matches('"').to_string();
