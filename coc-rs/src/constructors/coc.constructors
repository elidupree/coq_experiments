/* Many of the rules work the same way for lambdas and foralls,
  so we use the same Formula constructor (`Abstraction`) for both of them, and just specify which one using this type. */
data AbstractionKind;
Lambda () -> AbstractionKind, notated "λ";
ForAll () -> AbstractionKind, notated "∀";

data Formula;
Prop () -> Formula, notated "ℙ";
Usage () -> Formula, notated "𝒱";
KnownUsage (type: Formula, namespace_competitors: Formula) -> Formula,
  notated "𝒱{type}({namespace_competitors})";
Abstraction (kind: AbstractionKind, parameter_type: Formula, body: Formula, bindings: BindingTree) -> Formula, notated "{kind}({bindings}:{parameter_type}), {body}";
Apply (m: Formula, n: Formula) -> Formula, notated "({m} {n})";

data BindingTree;
BindNotThis () -> BindingTree, notated "∅";
BindVariable () -> BindingTree, notated "𝕍";
BindBranch (m: BindingTree, n: BindingTree) -> BindingTree, notated "({m} {n})";

data WhichLambda;
ThisLambda (bindings: BindingTree) -> WhichLambda, notated "{bindings}";
LambdaInL (which: WhichLambda) -> WhichLambda, notated "𝐿{which}";
LambdaInR (which: WhichLambda) -> WhichLambda, notated "𝑅{which}";

predicate EmptyBindingsShapedLike Formula BindingTree, notated "{0}'s empty bindings are {1}";
EmptyBindingsShapedLikeUsage()-> EmptyBindingsShapedLike Usage BindNotThis;
EmptyBindingsShapedLikeKnownUsage(type: Formula, namespace_competitors: Formula)-> EmptyBindingsShapedLike (KnownUsage type namespace_competitors) BindNotThis;
EmptyBindingsShapedLikeProp()-> EmptyBindingsShapedLike Prop BindNotThis;
EmptyBindingsShapedLikeAbstraction(
    kind: AbstractionKind, parameter_type: Formula, body: Formula, bindings: BindingTree,
    a: BindingTree, b: BindingTree,
    _: EmptyBindingsShapedLike parameter_type a,
    _: EmptyBindingsShapedLike body b,
)-> EmptyBindingsShapedLike (Abstraction kind parameter_type body bindings) (BindBranch a b);
EmptyBindingsShapedLikeApply(
    m: Formula, n: Formula,
    a: BindingTree, b: BindingTree,
    _: EmptyBindingsShapedLike m a,
    _: EmptyBindingsShapedLike n b,
)-> EmptyBindingsShapedLike (Apply m n) (BindBranch a b);

predicate BindingTreeSubstitution BindingTree BindingTree BindingTree BindingTree, notated "{3} = {2}[{0}:={1}]";
predicate FormulaSubstitution     BindingTree Formula     Formula     Formula    , notated "{3} = {2}[{0}:={1}]";

FormulaSubstitutionHere (v: Formula) -> FormulaSubstitution BindVariable v Usage v;
BindingSubstitutionHere (d: BindingTree) -> BindingTreeSubstitution BindVariable d BindNotThis d;
FormulaSubstitutionProp (v: Formula) -> FormulaSubstitution BindNotThis v Prop Prop;
FormulaSubstitutionKnownUsage (v: Formula, t: Formula, i: Formula)
  -> FormulaSubstitution BindNotThis v (KnownUsage t i) (KnownUsage t i);
BindingSubstitutionNeither (d: BindingTree) -> BindingTreeSubstitution BindNotThis d BindNotThis BindNotThis;
BindingSubstitutionAlready (d: BindingTree) -> BindingTreeSubstitution BindNotThis d BindVariable BindVariable;

BindingSubstitutionBranch(m: BindingTree, n: BindingTree, mb: BindingTree, nb: BindingTree, inserted_bindings: BindingTree,
    m2: BindingTree, n2: BindingTree,
    _:BindingTreeSubstitution mb inserted_bindings m m2,
    _:BindingTreeSubstitution nb inserted_bindings n n2,
)-> BindingTreeSubstitution (BindBranch mb nb) inserted_bindings (BindBranch m n) (BindBranch m2 n2);

FormulaSubstitutionApply (
    repl: Formula, m: Formula, n: Formula, m2: Formula, n2: Formula, mb: BindingTree, nb: BindingTree,
    _ : FormulaSubstitution mb repl m m2,
    _ : FormulaSubstitution nb repl n n2,
) -> FormulaSubstitution (BindBranch mb nb) repl (Apply m n) (Apply m2 n2);

FormulaSubstitutionAbstraction (
    kind: AbstractionKind, parameter_type: Formula, body: Formula, bindings: BindingTree,
    parameter_type2: Formula, body2: Formula, bindings2: BindingTree,
    parameter_replaced_bindings: BindingTree, body_replaced_bindings: BindingTree,
    replacement: Formula, replacement_empty_bindings: BindingTree,
    _ : FormulaSubstitution parameter_replaced_bindings replacement parameter_type parameter_type2,
    _ : FormulaSubstitution body_replaced_bindings replacement body body2,
    _ : BindingTreeSubstitution body_replaced_bindings replacement_empty_bindings bindings bindings2,
    _ : EmptyBindingsShapedLike replacement replacement_empty_bindings,
) -> FormulaSubstitution
    (BindBranch parameter_replaced_bindings body_replaced_bindings)
    replacement
    (Abstraction kind parameter_type body bindings)
    (Abstraction kind parameter_type2 body2 bindings2);


/* how the bindings of an outer lambda/forall are transformed by a particular unfolding;
  uses the same notation as UnfoldInFormula, which is the same thing but for Formulas */
predicate UnfoldInBindings WhichLambda BindingTree BindingTree, notated "{1} →({0}) {2}";
predicate UnfoldInFormula WhichLambda Formula Formula, notated "{1} →({0}) {2}";
UnfoldFormulaHere (
    parameter_type: Formula, body: Formula, bindings: BindingTree,
    parameter: Formula,
    result: Formula,
    _:FormulaSubstitution bindings parameter body result,
)-> UnfoldInFormula
  (ThisLambda bindings)
  (Apply (Abstraction Lambda parameter_type body bindings) parameter)
  result;
UnfoldBindingsHere(
    replaced_bindings: BindingTree,
    bindings_in_parameter_type: BindingTree, bindings_in_body: BindingTree,
    bindings_in_parameter: BindingTree,
    new_bindings: BindingTree,
    _: BindingTreeSubstitution replaced_bindings bindings_in_parameter bindings_in_body new_bindings,
) -> UnfoldInBindings
  (ThisLambda replaced_bindings)
  (BindBranch (BindBranch bindings_in_parameter_type bindings_in_body) bindings_in_parameter)
  new_bindings;

UnfoldFormulaApplyL (
    m: Formula, n: Formula, m2: Formula,
    which: WhichLambda,
    _ : UnfoldInFormula which m m2,
)-> UnfoldInFormula (LambdaInL which) (Apply m n) (Apply m2 n);
UnfoldBindingsL (
    which: WhichLambda,
    m: BindingTree, n: BindingTree, m2: BindingTree,
    _: UnfoldInBindings which m m2,
)-> UnfoldInBindings (LambdaInL which) (BindBranch m n) (BindBranch m2 n);

UnfoldFormulaApplyR (
    m: Formula, n: Formula, n2: Formula,
    which: WhichLambda,
    _ : UnfoldInFormula which n n2,
)-> UnfoldInFormula (LambdaInR which) (Apply m n) (Apply m n2);
UnfoldBindingsR (
    which: WhichLambda,
    m: BindingTree, n: BindingTree, n2: BindingTree,
    _: UnfoldInBindings which n n2,
)->UnfoldInBindings (LambdaInR which) (BindBranch m n) (BindBranch m n2);

UnfoldFormulaAbstractionArgType (
    kind: AbstractionKind, parameter_type: Formula, body: Formula, bindings: BindingTree,
    parameter_type2: Formula,
    which: WhichLambda,
    _ : UnfoldInFormula which parameter_type parameter_type2,
)-> UnfoldInFormula (LambdaInL which)
     (Abstraction kind parameter_type body bindings)
     (Abstraction kind parameter_type2 body bindings);

UnfoldFormulaAbstractionBody (
    kind: AbstractionKind, parameter_type: Formula, body: Formula, bindings: BindingTree, bindings2: BindingTree,
    body2: Formula,
    which: WhichLambda,
    _ : UnfoldInBindings which bindings bindings2,
    _ : UnfoldInFormula which body body2,
)-> UnfoldInFormula (LambdaInR which)
     (Abstraction kind parameter_type body bindings)
     (Abstraction kind parameter_type body2 bindings2);


predicate FoldEquivalent Formula Formula, notated "{0} ≅ {1}";
UnfoldIsEquivalence (which: WhichLambda, a: Formula, b: Formula,
    _:UnfoldInFormula which a b) -> FoldEquivalent a b;
FoldReflexive (formula: Formula) -> FoldEquivalent formula formula;
FoldSymmetric (x: Formula, y: Formula, _:FoldEquivalent x y)-> FoldEquivalent y x;
FoldTransitive (x: Formula, y: Formula, z: Formula,_:FoldEquivalent x y,_:FoldEquivalent y z)-> FoldEquivalent x z;

predicate IsType Formula, notated "{0} is a type";
predicate HasType Formula Formula, notated "{0} : {1}";

PropIsType() -> IsType Prop;

PropsAreTypes(t: Formula, _ : HasType t Prop) -> IsType t;

TypeOfVariableUsage(
    type: Formula, namespace_competitors: Formula,
    _ : IsType type,
) -> HasType (KnownUsage type namespace_competitors) type;

TypeOfForAll (
    parameter_type: Formula, return_type: Formula, return_type_after_bindings: Formula, bindings: BindingTree,
    _ : IsType parameter_type,
    _ : HasType return_type_after_bindings Prop,
    _ : FormulaSubstitution bindings
      (KnownUsage parameter_type return_type)
      return_type return_type_after_bindings,
) -> HasType (Abstraction ForAll parameter_type return_type bindings) Prop;

ForAllIsType (
    parameter_type: Formula, return_type: Formula, return_type_after_bindings: Formula, bindings: BindingTree,
    _ : IsType parameter_type,
    _ : IsType return_type_after_bindings,
    _ : FormulaSubstitution bindings
      (KnownUsage parameter_type return_type)
      return_type return_type_after_bindings,
) -> IsType (Abstraction ForAll parameter_type return_type bindings);

/* Note: I don't know if the variable-identities below actually need to include return_type,
  or if just body is enough. Playing it safe though. */
TypeOfLambda (
    parameter_type: Formula,
    body: Formula, body_after_bindings: Formula,
    return_type: Formula, return_type_after_bindings: Formula,
    lambda_bindings: BindingTree, forall_bindings: BindingTree,
    _ : IsType (Abstraction ForAll parameter_type return_type_after_bindings forall_bindings),
    _ : HasType body_after_bindings return_type_after_bindings,
    _ : FormulaSubstitution lambda_bindings
      (KnownUsage parameter_type (Apply body return_type))
      body body_after_bindings,
    _ : FormulaSubstitution forall_bindings
      (KnownUsage parameter_type (Apply body return_type))
      return_type return_type_after_bindings,
) -> HasType
    (Abstraction Lambda parameter_type body lambda_bindings)
    (Abstraction ForAll parameter_type return_type forall_bindings);

TypeOfApply (
    function: Formula, parameter: Formula,
    parameter_type: Formula, return_type: Formula, forall_bindings: BindingTree,
    result_type: Formula,
    _ : HasType function (Abstraction ForAll parameter_type return_type forall_bindings),
    _ : HasType parameter parameter_type,
    _ : FormulaSubstitution forall_bindings parameter return_type result_type,
) -> HasType (Apply function parameter) result_type;

TypeFoldEquivalent (
    member: Formula,
    ty: Formula,
    ty2: Formula,
    _ : HasType member ty,
    _ : FoldEquivalent ty ty2,
    _ : IsType ty2,
) -> HasType member ty2;