use crate::introspective_calculus::{Formula, Atom, ExplicitRule, AbstractionKind, ArrowChain};
use crate::introspective_calculus::inference::{ProofLine, NamedPrettyInference, PrettyInference, PrettyInferenceInner, FormulaOrImplicitEquality};
use lalrpop_util::ParseError;

grammar;

extern {
    type Error = String;
}

pub ExplicitRule: ExplicitRule = {
  <name:Name> ":=" <formula:Formula> => ExplicitRule{<>}
}

pub ProofLine: ProofLine = {
  <name:Name> "." <formula:FormulaOrImplicitEquality> => ProofLine{<>, ..ProofLine::default()},
  <name:Name> "." <formula:FormulaOrImplicitEquality> "[" <referents:CommaSeparated<Name>> "]" => ProofLine{name, formula, referents: referents.into_iter().collect(), ..ProofLine::default()},
  <name:Name> "." <formula:FormulaOrImplicitEquality> "[" <referents:(<Name> ",")*> "by" <deriver_name: Name?> "]" => ProofLine{name, formula, referents: referents.into_iter().collect(), deriver_name},
}

FormulaOrImplicitEquality: FormulaOrImplicitEquality = {
  Formula => FormulaOrImplicitEquality::Formula(<>),
  "=" <Formula> => FormulaOrImplicitEquality::ImplicitEquality(<>),
  <Formula> "..." => FormulaOrImplicitEquality::StartEqChain(<>),
}

pub NamedInference: NamedPrettyInference = {
  <name:Name> ":=" <inference:Inference> => NamedPrettyInference {<>}.into(),
}

pub Inference: PrettyInference = {
  //"|-" <conclusion:Formula> => PrettyInferenceInner {premises: Vec::new(), <>}.into(),
  <premises:CommaSeparated<Formula>> "|-" <conclusion:Formula> => PrettyInferenceInner {<>}.into(),
}

CommaSeparated<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

FormulaIndivisible: Formula = {
  Name => Formula::metavariable(<>),
  "(" <Formula> ")",

  "equals" => Formula::atom(Atom::Equals),
  "const" => Formula::atom(Atom::Const),
  "fuse" => Formula::atom(Atom::Fuse),

  "id" => Formula::id(),
  "All" => Formula::all(),
  //"And" => Formula::and_function(),
  "True" => Formula::prop_true(),
  "False" => Formula::prop_false(),

  "(" <first:Formula> "," <mut rest:CommaSeparated<Formula>> ")" => {
    rest.insert(0, first);
    Formula::tuple(rest)
  },
}


//FormulaDivisibleRightOnly: Formula = {
//}

//FormulaDivisibleLeftOnly: Formula = {
  //<FormulaIndivisibleRight> "+1" => Formula::LevelSuccessor(<>)),
//}

//FormulaIndivisibleLeft: Formula = {
  //FormulaDivisibleRightOnly,
  //FormulaIndivisible,
//}

//FormulaIndivisibleRight: Formula = {
  //FormulaDivisibleLeftOnly,
  //FormulaIndivisible,
//}

pub Formula: Formula = {
  <ApplyChain> "&" <ApplyChain> =>? Formula::and([<>])
    .map_err(|error| ParseError::User { error }),
  <ApplyChain> "->" <ApplyChain> =>? Formula::implies([<>])
    .map_err(|error| ParseError::User { error }),
  <ApplyChain> "=" <ApplyChain> => Formula::equals([<>]),
  ApplyChain,
  //ApplyChain2,
  <c:ArrowChain> <f:ApplyChain> => c.to_formula(f),
  //FormulaDivisibleRightOnly,
  //FormulaDivisibleLeftOnly,
  //FormulaIndivisible,
  //ApplyChain2,
}

ApplyChain: Formula = {
  FormulaIndivisible,//FormulaIndivisibleRight,

  ApplyChain FormulaIndivisible => Formula::apply([<>]),
  //ApplyChain FormulaIndivisibleLeft => Formula::apply([<>]),
}

Arrow: (AbstractionKind, String) = {
  <n:Name> "=>" => (AbstractionKind::Lambda, n),
  "âˆ€" <n:Name> "," => (AbstractionKind::ForAll, n),
  //<antecedent:ApplyChain> "->" <level:FormulaIndivisibleLeft> <consequent:ArrowChain> => Formula::implies([<>])),
}

ArrowChain: ArrowChain = {
  //ApplyChain => ArrowChain::Formula(<>),
  //ApplyChain2,
  //FormulaIndivisible, //FormulaIndivisibleLeft,

  Arrow => ArrowChain(<>, None),
  <c:ArrowChain> <a:Arrow> => ArrowChain(a, Some(Box::new(c))),
}

Name: String = r#"[a-zA-Z0-9_]+|"([a-zA-Z ]*)""# => <>.to_string();
